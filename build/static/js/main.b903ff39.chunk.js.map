{"version":3,"sources":["components/TodoForm.tsx","components/TodoList.tsx","components/Footer.tsx","hooks/useLocalStorage.tsx","components/Todo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["React","memo","props","addTodo","checkAll","isCheckAll","canRenderIconCheckAll","inputRef","useRef","useEffect","current","focus","className","type","id","checked","onChange","htmlFor","onClick","placeholder","ref","onKeyPress","e","key","value","target","trim","TodoList","list","deleteItem","tickABox","map","todoItem","isCompleted","description","size","Footer","filterStatus","setFilterStatus","itemLeft","canRender","useLocalStorage","useState","keyLocal","local","localStorage","getItem","JSON","parse","arr","setItem","stringify","Todo","setIsCheckAll","getLocalData","updateLocalData","setList","data","changeCheckAllState","useCallback","Date","getTime","filter","item","length","filterList","status","todo","prev","newList","itemIndex","findIndex","Number","isInteger","a","splice","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b903ff39.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport \"../styles/TodoForm.css\";\r\n\r\ninterface IFormProp {\r\n  addTodo: (description: string) => void;\r\n  checkAll: () => void;\r\n  isCheckAll: boolean;\r\n  canRenderIconCheckAll:boolean\r\n}\r\nexport default React.memo(function TodoForm(props: IFormProp) {\r\n  const { addTodo, checkAll, isCheckAll,canRenderIconCheckAll } = props;\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    inputRef.current?.focus();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"d-flex align-center header\">\r\n      <input\r\n        type=\"checkbox\"\r\n        id=\"checkAll\"\r\n        checked={isCheckAll}\r\n        onChange={() => {}}\r\n      />\r\n      <label htmlFor=\"checkAll\" className={`checkAll ${!canRenderIconCheckAll &&\"icon-check-all-disable\"}`} onClick={checkAll}></label>\r\n      <input\r\n        className=\"input-field\"\r\n        placeholder=\"Todo List\"\r\n        ref={inputRef}\r\n        onKeyPress={(e) => {\r\n          if (e.key === \"Enter\") {\r\n            let value = (e.target as HTMLInputElement).value.trim();\r\n            if (value !== \"\") addTodo(value);\r\n\r\n            if (inputRef.current) inputRef.current.value = \"\";\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n","import React, { FC } from \"react\";\r\nimport \"../styles/TodoList.css\";\r\nimport { VscChromeClose } from \"react-icons/vsc\";\r\nexport interface ITodoItem {\r\n  id: number;\r\n  description: string;\r\n  isCompleted: boolean;\r\n}\r\n\r\ninterface ITodoListProps {\r\n  list: ITodoItem[];\r\n  deleteItem: (id: number) => void;\r\n  tickABox: (id: number, status: boolean) => void;\r\n}\r\n\r\nexport const TodoList: FC<ITodoListProps> = ({\r\n  list,\r\n  deleteItem,\r\n  tickABox,\r\n}) => {\r\n  return (\r\n    <section>\r\n      {list.map((todoItem: ITodoItem) => (\r\n        <div className=\"todo-item\" key={`edit-${todoItem.id}`}>\r\n          <div className=\"tick-container d-flex align-center\">\r\n            <input\r\n              type=\"checkbox\"\r\n              id={`\"checkbox-\"${todoItem.id}`}\r\n              checked={todoItem.isCompleted}\r\n              onChange={() => {\r\n                tickABox(todoItem.id, !todoItem.isCompleted);\r\n              }}\r\n            />\r\n            <label\r\n              htmlFor={`\"checkbox-\"${todoItem.id}`}\r\n              className=\"label-checkbox\"\r\n            ></label>\r\n          </div>\r\n          <div\r\n            className={`item-description ${\r\n              todoItem.isCompleted ? \"item-complete\" : \"\"\r\n            }`}\r\n          >\r\n            {todoItem.description}\r\n          </div>\r\n          <div className=\"d-flex align-center icon-container\">\r\n            <VscChromeClose\r\n              size=\"20\"\r\n              onClick={() => {\r\n                deleteItem(todoItem.id);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { FC } from \"react\";\r\nimport \"../styles/Footer.css\";\r\n\r\ninterface IFooterProps {\r\n  filterStatus: string;\r\n  setFilterStatus: (status: string) => void;\r\n  itemLeft: number;\r\n  canRender: boolean;\r\n}\r\n\r\nconst Footer: FC<IFooterProps> = ({\r\n  filterStatus,\r\n  setFilterStatus,\r\n  itemLeft,\r\n  canRender,\r\n}) => {\r\n  return (\r\n    <>\r\n      {canRender && (\r\n        <div className=\"d-flex footer\">\r\n          <div className=\"d-flex align-center\">\r\n            {itemLeft} items left\r\n          </div>\r\n          <div className=\"d-flex align-center filter-button-container\">\r\n            <button\r\n              className={`filter-button d-flex align-center\r\n          ${filterStatus === \"All\" && \"button-activate\"} `}\r\n              onClick={() => {\r\n                setFilterStatus(\"All\");\r\n              }}\r\n            >\r\n              All\r\n            </button>\r\n            <button\r\n              className={`filter-button d-flex align-center\r\n        ${filterStatus === \"Activated\" && \"button-activate\"}\r\n        `}\r\n              onClick={() => {\r\n                setFilterStatus(\"Activated\");\r\n              }}\r\n            >\r\n              Activated\r\n            </button>\r\n            <button\r\n              className={`filter-button d-flex align-center\r\n          ${filterStatus === \"Completed\" && \"button-activate\"} `}\r\n              onClick={() => {\r\n                setFilterStatus(\"Completed\");\r\n              }}\r\n            >\r\n              Completed\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Footer;\r\n","import React, { useState } from \"react\";\r\n\r\nconst useLocalStorage = (key: string): any[] => {\r\n  const [keyLocal] = useState<string>(key);\r\n  const getData = () => {\r\n    const local = localStorage.getItem(keyLocal);\r\n    if (typeof local === \"string\") {\r\n      return JSON.parse(local);\r\n    } else return [];\r\n  };\r\n  const updateData = (arr: any[]) => {\r\n    localStorage.setItem(keyLocal, JSON.stringify(arr));\r\n  };\r\n\r\n  return [getData, updateData];\r\n};\r\n\r\nexport default useLocalStorage;\r\n","import React, { useState, useCallback, useEffect } from \"react\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport \"../styles/Todo.css\";\r\nimport TodoList, { ITodoItem } from \"./TodoList\";\r\nimport Footer from \"./Footer\";\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\n\r\nexport default function Todo() {\r\n  const [filterStatus, setFilterStatus] = useState<string>(\"All\");\r\n  const [isCheckAll, setIsCheckAll] = useState<boolean>(false);\r\n  const [getLocalData, updateLocalData] = useLocalStorage(\"todo\");\r\n  const [list, setList] = useState<ITodoItem[]>([]);\r\n\r\n  //   Use callback to remmerber this func because everytime you update state this function is a new one so when it pass to TodoForm Component is will make it re-render.\r\n\r\n\r\n  useEffect(() => {\r\n    let data: ITodoItem[] = getLocalData();\r\n    changeCheckAllState(data);\r\n    setList(data);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    updateLocalData(list);\r\n  }, [list]);\r\n\r\n  const addTodo = useCallback(\r\n    (description: string) => {\r\n      setList([\r\n        ...list,\r\n        {\r\n          id: new Date().getTime(),\r\n          description: description,\r\n          isCompleted: false,\r\n        },\r\n      ]);\r\n    },\r\n    [list]\r\n  );\r\n\r\n  const deleteById = (id: number) => {\r\n    let newList: ITodoItem[] = list.filter((item) => item.id !== id);\r\n    newList.length == 0 && setIsCheckAll(false);\r\n    setList(newList);\r\n  };\r\n\r\n  const changeCheckAllState = (list: ITodoItem[]) => {\r\n    if (list.filter((item) => !item.isCompleted).length === 0)\r\n      setIsCheckAll(true);\r\n    else setIsCheckAll(false);\r\n  };\r\n\r\n  const tickBox = (id: number, status: boolean) => {\r\n    const itemIndex = list.findIndex((todo) => todo.id === id);\r\n\r\n    if (Number.isInteger(itemIndex)) {\r\n      let a = [...list];\r\n\r\n      a.splice(itemIndex, 1, { ...list[itemIndex], isCompleted: status });\r\n\r\n      changeCheckAllState(a);\r\n\r\n      setList(a);\r\n    }\r\n  };\r\n\r\n  const checkAll = () => {\r\n    if (!isCheckAll)\r\n      setList(\r\n        list.map((todo) => {\r\n          return {\r\n            ...todo,\r\n            isCompleted: true,\r\n          };\r\n        })\r\n      );\r\n    else {\r\n      setList(\r\n        list.map((todo) => {\r\n          return {\r\n            ...todo,\r\n            isCompleted: false,\r\n          };\r\n        })\r\n      );\r\n    }\r\n    setIsCheckAll((prev) => !prev);\r\n  };\r\n\r\n  const filterList = (list: ITodoItem[], status: string) => {\r\n    switch (status) {\r\n      case \"All\":\r\n        return list;\r\n\r\n      case \"Activated\":\r\n        return list.filter((todo) => todo.isCompleted === false);\r\n\r\n      case \"Completed\":\r\n        return list.filter((todo) => todo.isCompleted === true);\r\n      default:\r\n        return list;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className=\"todo-container\">\r\n      <TodoForm\r\n        addTodo={addTodo}\r\n        checkAll={checkAll}\r\n        isCheckAll={isCheckAll}\r\n        canRenderIconCheckAll={list.length > 0}\r\n      />\r\n\r\n      <TodoList\r\n        list={filterList(list, filterStatus)}\r\n        deleteItem={deleteById}\r\n        tickABox={tickBox}\r\n      />\r\n      <Footer\r\n        filterStatus={filterStatus}\r\n        setFilterStatus={setFilterStatus}\r\n        itemLeft={filterList(list, \"Activated\").length}\r\n        canRender={list.length > 0}\r\n      />\r\n    </section>\r\n  );\r\n}\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport Todo from \"./components/Todo\";\nimport \"./App.css\";\nfunction App() {\n  return (\n    <Todo />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}